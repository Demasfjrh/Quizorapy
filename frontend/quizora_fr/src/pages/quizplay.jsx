// src/pages/QuizPlay.jsx
import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router';
import { getQuizById, submitQuiz } from '../services/api.js';
import Toaster from '../components/toaster';

export default function QuizPlay() {
Â  const { id } = useParams();
Â  const navigate = useNavigate();

Â  const [quiz, setQuiz] = useState(null);
Â  const [loading, setLoading] = useState(true);
Â  const [fetchError, setFetchError] = useState(null);

Â  const [currentIndex, setCurrentIndex] = useState(0);
Â  const [selectedChoiceId, setSelectedChoiceId] = useState(null);
Â  const [answers, setAnswers] = useState([]); // {question_id, choice_id}
Â  const [submitting, setSubmitting] = useState(false);

Â  const [result, setResult] = useState(null); // { total, correct, score_percent }
Â  const [toast, setToast] = useState({ open: false, msg: '', type: 'info' });

Â  useEffect(() => {
Â  Â  let mounted = true;
Â  Â  async function fetchQuiz() {
Â  Â  Â  setLoading(true);
Â  Â  Â  try {
Â  Â  Â  Â  const data = await getQuizById(id);
Â  Â  Â  Â  if (!mounted) return;
Â  Â  Â  Â  setQuiz(data);
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error(err);
Â  Â  Â  Â  setFetchError('Gagal memuat quiz. Coba refresh halaman.');
Â  Â  Â  } finally {
Â  Â  Â  Â  if (mounted) setLoading(false);
Â  Â  Â  }
Â  Â  }
Â  Â  fetchQuiz();
Â  Â  return () => {
Â  Â  Â  mounted = false;
Â  Â  };
Â  }, [id]);

Â  const currentQuestion = quiz?.questions?.[currentIndex];

Â  // helper: show toast
Â  function showToast(msg, type = 'info') {
Â  Â  setToast({ open: true, msg, type });
Â  }

Â  // user chooses an option
Â  const handleChoose = async (choiceId) => {
Â  Â  if (!currentQuestion || selectedChoiceId !== null || submitting) return;

Â  Â  setSelectedChoiceId(choiceId);
Â  Â  const newAnswers = [
Â  Â  Â  ...answers,
Â  Â  Â  { question_id: currentQuestion.id, choice_id: choiceId },
Â  Â  ];
Â  Â  setAnswers(newAnswers);

Â  Â  // small delay to show selection effect
Â  Â  setTimeout(async () => {
Â  Â  Â  // if more questions -> next
Â  Â  Â  if (currentIndex + 1 < (quiz?.questions?.length || 0)) {
Â  Â  Â  Â  setCurrentIndex((c) => c + 1);
Â  Â  Â  Â  setSelectedChoiceId(null);
Â  Â  Â  } else {
Â  Â  Â  Â  // finish -> submit
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  setSubmitting(true);
Â  Â  Â  Â  Â  const res = await submitQuiz(quiz.id, newAnswers);
Â  Â  Â  Â  Â  setResult(res);
Â  Â  Â  Â  Â  showToast('Quiz selesai â€” hasil sudah dihitung', 'success');
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  console.error(err);
Â  Â  Â  Â  Â  showToast('Gagal mengirim jawaban', 'error');
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  setSubmitting(false);
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  }, 700);
Â  };

Â  // Loading & Error UI (sedikit sentuhan natural)
Â  if (loading) {
Â  Â  return (
Â  Â  Â  <div className="min-h-[60vh] flex items-center justify-center p-6 bg-linear-to-br from-green-50 to-blue-100">
Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  <div className="animate-pulse h-6 w-48 bg-green-200 rounded mb-3" />
Â  Â  Â  Â  Â  <div className="animate-pulse h-4 w-64 bg-blue-200 rounded mb-2" />
Â  Â  Â  Â  Â  <div className="animate-pulse h-3 w-36 bg-green-200 rounded mt-6" />
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (fetchError) {
Â  Â  return (
Â  Â  Â  <div className="min-h-[60vh] flex items-center justify-center p-6 bg-linear-to-br from-green-50 to-blue-100">
Â  Â  Â  Â  <div className="text-center text-red-600 font-semibold border-2 border-red-400 p-4 bg-white/70 rounded-lg shadow-md">{fetchError}</div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (!quiz) {
Â  Â  return (
Â  Â  Â  <div className="min-h-[60vh] flex items-center justify-center p-6 bg-linear-to-br from-green-50 to-blue-100">
Â  Â  Â  Â  <div className="text-center text-green-700 font-semibold border-2 border-green-400 p-4 bg-white/70 rounded-lg shadow-md">Quiz tidak ditemukan.</div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  // Result UI (tetap natural/glassy)
Â  if (result) {
Â  Â  return (
Â  Â  Â  <div className="min-h-[60vh] flex flex-col items-center justify-center p-6 bg-linear-to-br from-green-50 to-blue-100">
Â  Â  Â  Â  {/* Hasil: Kartu Glassy dengan border tebal */}
Â  Â  Â  Â  <div className="bg-white/90 shadow-2xl rounded-xl p-8 w-full max-w-md text-center border-t-4 border-b-4 border-green-500 backdrop-blur-sm"> 
Â  Â  Â  Â  Â  <h3 className="text-2xl font-bold mb-2 text-green-700">Quiz Selesai ðŸŽ‰</h3>
Â  Â  Â  Â  Â  <p className="text-xl text-gray-700">
Â  Â  Â  Â  Â  Â  Skor: <span className="font-extrabold text-blue-600">{result.correct}</span> /{' '}
Â  Â  Â  Â  Â  Â  {result.total}
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  <p className="text-md text-gray-600 mt-1">
Â  Â  Â  Â  Â  Â  ({result.score_percent.toFixed(2)}%)
Â  Â  Â  Â  Â  </p>

Â  Â  Â  Â  Â  <div className="mt-6 flex justify-center gap-3">
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  // replay same quiz
Â  Â  Â  Â  Â  Â  Â  Â  setAnswers([]);
Â  Â  Â  Â  Â  Â  Â  Â  setResult(null);
Â  Â  Â  Â  Â  Â  Â  Â  setCurrentIndex(0);
Â  Â  Â  Â  Â  Â  Â  Â  setSelectedChoiceId(null);
Â  Â  Â  Â  Â  Â  Â  Â  showToast('Mulai ulang quiz', 'info');
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-green-600 text-white rounded-lg shadow-md hover:bg-green-700 transition font-semibold"> 
Â  Â  Â  Â  Â  Â  Â  Main Lagi
Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate('/quiz')}
Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 border-2 border-blue-600 text-blue-600 rounded-lg hover:bg-blue-100 transition font-semibold">
Â  Â  Â  Â  Â  Â  Â  Kembali ke Daftar Quiz
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <Toaster
Â  Â  Â  Â  Â  open={toast.open}
Â  Â  Â  Â  Â  message={toast.msg}
Â  Â  Â  Â  Â  type={toast.type}
Â  Â  Â  Â  Â  onClose={() => setToast({ ...toast, open: false })}
Â  Â  Â  Â  />
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  // MAIN PLAY UI
Â  return (
Â  Â  <div className="p-6 flex justify-center bg-linear-to-br from-green-50 to-blue-100 min-h-screen">
Â  Â  Â  <div className="w-full max-w-2xl mt-10">
Â  Â  Â  Â  {/* Kontainer Pertanyaan: Kartu Glassy/Aero */}
Â  Â  Â  Â  <div className="bg-white/90 rounded-xl shadow-2xl p-6 min-h-[220px] md:min-h-[260px] border-t-2 border-l-2 border-green-300 backdrop-blur-sm"> 
Â  Â  Â  Â  Â  <div className="flex items-center justify-between mb-4">
Â  Â  Â  Â  Â  Â  <div className="text-sm text-green-700 font-semibold">
Â  Â  Â  Â  Â  Â  Â  Pertanyaan {currentIndex + 1} dari {quiz.questions.length}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="text-sm text-blue-700">
Â  Â  Â  Â  Â  Â  Â  {/* Progres Bar: Warna Hijau Alam */}
Â  Â  Â  Â  Â  Â  Â  <div className="w-36 bg-green-100 h-2 rounded-full overflow-hidden shadow-inner"> 
Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-green-500 h-2 transition-all"
Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  width: `${(currentIndex / quiz.questions.length) * 100}%`,
Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="mb-6">
Â  Â  Â  Â  Â  Â  <h3 className="text-xl md:text-2xl font-bold text-gray-800">
Â  Â  Â  Â  Â  Â  Â  {currentQuestion.text}
Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
Â  Â  Â  Â  Â  Â  {currentQuestion.choices.map((choice) => {
Â  Â  Â  Â  Â  Â  Â  const isSelected = choice.id === selectedChoiceId;
Â  Â  Â  Â  Â  Â  Â  const showResultState = selectedChoiceId !== null;
Â  Â  Â  Â  Â  Â  Â  const isCorrect = showResultState && choice.is_correct === true;

Â  Â  Â  Â  Â  Â  Â  // Base Button Style: Clean, bordered, slightly glassy look
Â  Â  Â  Â  Â  Â  Â  const base =
Â  Â  Â  Â  Â  Â  Â  Â  'px-4 py-3 rounded-xl text-left border-2 transition-colors duration-200 ease-in-out focus:outline-none focus:ring-4 font-medium text-gray-800 shadow-md active:shadow-inner';

Â  Â  Â  Â  Â  Â  Â  // Selection/Result States
Â  Â  Â  Â  Â  Â  Â  const selectedClass = showResultState
Â  Â  Â  Â  Â  Â  Â  Â  ? isCorrect
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'bg-green-500 text-white border-green-700 shadow-green-400/50' // Correct: Green
Â  Â  Â  Â  Â  Â  Â  Â  Â  : isSelected
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'bg-red-500 text-white border-red-700 shadow-red-400/50' // Incorrect: Red
Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'bg-white/70 text-gray-700 border-gray-300' // Unselected: Faded
Â  Â  Â  Â  Â  Â  Â  Â  : 'bg-white hover:bg-blue-50 border-blue-400 focus:ring-blue-300'; // Default: Blue accent

Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  key={choice.id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleChoose(choice.id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={selectedChoiceId !== null}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`${base} ${selectedClass}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ minHeight: 56 }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-sm md:text-base">{choice.text}</div>
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* small footer */}
Â  Â  Â  Â  <div className="mt-4 flex justify-between items-center px-2">
Â  Â  Â  Â  Â  <div className="text-sm text-green-700 font-semibold">
Â  Â  Â  Â  Â  Â  Kategori: {quiz.categories?.join(', ')}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div className="text-sm text-blue-700 font-semibold">
Â  Â  Â  Â  Â  Â  {submitting ? 'Mengirim Jawaban...' : ''}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  <Toaster
Â  Â  Â  Â  open={toast.open}
Â  Â  Â  Â  message={toast.msg}
Â  Â  Â  Â  type={toast.type}
Â  Â  Â  Â  onClose={() => setToast({ ...toast, open: false })}
Â  Â  Â  />
Â  Â  </div>
Â  );
}